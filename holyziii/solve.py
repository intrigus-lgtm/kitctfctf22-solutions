from z3 import *

# https://gist.github.com/ju256/42f7515363381fb6ed22455bb9189254
from z3_helper import *


# obtained with ida_get_func_params.py
func_params = [(25, 239, 16), (18, 80, 3), (27, 83, 255), (18, 12, 126), (19, 55, 192), (28, 21, 41), (26, 58, 56), (26, 125, 179), (28, 71, 244), (28, 30, 214), (27, 119, 203), (17, 187, 120), (22, 234, 198), (22, 49, 190), (31, 202, 73), (25, 210, 127), (28, 145, 221), (26, 9, 212), (16, 15, 41), (28, 18, 32), (22, 19, 179), (25, 216, 124), (30, 142, 99), (29, 137, 250), (21, 14, 176), (20, 92, 223), (27, 15, 36), (18, 79, 125), (27, 218, 83), (23, 134, 201), (18, 139, 88), (18, 223, 223), (19, 128, 67), (21, 255, 240), (21, 112, 171), (23, 169, 196), (31, 200, 127), (27, 16, 0), (21, 207, 216), (18, 57, 60), (30, 253, 12), (17, 28, 37), (26, 146, 187), (19, 236, 56), (27, 179, 26), (19, 152, 183), (23, 180, 186), (29, 74, 107), (18, 32, 185), (25, 182, 99), (29, 16, 224), (16, 17, 105), (30, 213, 205), (17, 124, 142), (27, 2, 68), (22, 209, 227), (17, 255, 240), (28, 61, 85), (20, 134, 67), (19, 22, 223), (29, 34, 125), (30, 26, 49), (23, 118, 192), (23, 245, 108), (17, 166, 65), (29, 223, 92), (29, 28, 82), (25, 176, 38), (18, 166, 231), (27, 86, 226), (17, 176, 129), (30, 241, 192), (29, 246, 132), (16, 109, 195), (20, 74, 249), (21, 133, 42), (28, 78, 37), (31, 24, 160), (17, 57, 124), (30, 73, 110), (18, 192, 123), (28, 170, 26), (25, 230, 187), (27, 28, 220), (22, 86, 52), (21, 134, 178), (16, 139, 137), (19, 215, 58), (17, 167, 159), (23, 156, 172), (19, 7, 185), (26, 74, 219), (18, 145, 118), (19, 48, 97), (27, 79, 11), (31, 84, 247), (23, 120, 23), (20, 162, 198), (24, 124, 135), (27, 52, 124), (16, 139, 163), (25, 91, 10), (28, 20, 22), (28, 60, 191), (31, 25, 233), (21, 153, 226), (24, 154, 166), (28, 56, 52), (19, 203, 168), (31, 244, 106), (19, 121, 39), (19, 74, 19), (29, 113, 153), (20, 107, 169), (23, 205, 196), (28, 121, 57), (20, 251, 125), (19, 50, 37), (21, 61, 53), (24, 47, 69), (26, 99, 14), (31, 2, 55), (30, 194, 6), (23, 177, 131), (23, 229, 204), (23, 172, 130), (31, 161, 97), (20, 61, 217), (27, 206, 123), (18, 9, 189), (26, 101, 214), (22, 215, 197), (19, 231, 179), (17, 212, 64), (28, 239, 125), (30, 186, 82), (28, 138, 109), (26, 254, 247), (28, 219, 150), (24, 160, 57), (16, 59, 215), (29, 193, 82), (18, 206, 8), (19, 156, 164), (26, 170, 96), (17, 81, 37), (23, 95, 44), (16, 136, 154), (30, 93, 73), (17, 136, 222), (27, 171, 216), (19, 45, 132), (28, 160, 234), (28, 73, 124), (16, 194, 246), (21, 137, 233), (27, 182, 156), (31, 167, 206), (26, 151, 94), (30, 129, 39), (24, 147, 86), (22, 237, 215), (30, 44, 252), (24, 132, 175), (27, 96, 244), (17, 149, 197), (31, 13, 180), (22, 241, 208), (17, 64, 85), (17, 221, 181), (16, 166, 13), (21, 29, 40), (28, 126, 245), (28, 183, 67), (23, 118, 49), (21, 67, 193), (19, 14, 253), (21, 210, 117), (24, 222, 37), (28, 204, 129), (19, 176, 86), (25, 191, 84), (31, 81, 164), (21, 71, 32), (21, 126, 245), (17, 243, 113), (24, 199, 105), (29, 118, 178), (23, 241, 56), (20, 101, 86), (27, 226, 125), (16, 171, 64), (16, 167, 160), (27, 249, 239), (19, 130, 5), (22, 198, 12), (22, 149, 130), (18, 33, 9), (21, 205, 84), (22, 228, 4), (17, 103, 192), (26, 206, 249), (24, 68, 221), (30, 221, 128), (31, 74, 14), (18, 104, 159), (31, 55, 16), (29, 133, 196), (16, 177, 222), (31, 127, 242), (30, 208, 15), (23, 157, 192), (22, 167, 20), (16, 17, 98), (29, 120, 147), (31, 138, 223), (22, 105, 26), (26, 3, 2), (25, 10, 85), (21, 135, 82), (22, 65, 137), (28, 194, 6), (30, 35, 251), (25, 42, 181), (18, 87, 93), (20, 49, 63), (19, 120, 111), (29, 56, 20), (26, 227, 79), (16, 203, 225), (25, 221, 5), (31, 98, 255), (22, 254, 206), (23, 212, 229), (19, 215, 46), (28, 76, 164), (19, 184, 171), (21, 160, 227), (25, 196, 1), (17, 113, 43), (22, 92, 107), (29, 60, 37), (25, 71, 143), (27, 224, 74), (24, 217, 253), (25, 180, 97), (25, 25, 184), (17, 189, 97), (24, 194, 30), (28, 221, 32), (17, 41, 76), (31, 198, 131), (18, 250, 220), (22, 131, 164), (28, 220, 225), (25, 186, 186)]


ALPH = string.ascii_lowercase + string.ascii_uppercase + string.digits

L = CustomAlphSolList("L", 16, ALPH, solver=s, uint_compatible=True)
first_half = L.sublist(range(16))

diff = 0
for i in range(0, 16, 2):
    diff += ((L[i] - L[i + 1]) & 0xff)

s.add(xor(first_half) == 3)
s.add(add_with_mask(first_half, 0xff) == 73)
s.add(prod_with_mask(first_half, 0xffffffff) == 1755935744)
s.add(diff == 1203)

L.restrict(12, 0x39)
L.restrict(6, 0x37)
L.restrict(11, 0x36)
L.restrict(1, 0x58)

s.add(L[10] ^ L[12] == 0x41)
s.add(L[2] ^ L[6] == 0x73)
s.add(L[15] ^ L[11] == 0x4f)
s.add(L[0] ^ L[1] == 0x6b)


s.add(L[8] ^ L[7] ^ L[4] ^ L[3] ^ L[2] == 100)

s.add(L[4] ^ L[14] ^ L[13] == 100)

s.add(L[4] + L[3] == 208)

s.add(L[7] + L[6] == 144)

s.add((L[3] + L[2] + L[1] + L[0]) & 0xff == 0x3e)

s.add(L[10] ^ L[9] == 0x1d)

ret = L.solve(all=True, log=True)
assert len(ret) == 1 and ret[0] == b"3XDoaU7Ywex69BGy"

solution1 = ret[0]

s.reset()

L2 = CustomAlphSolList("L2", 16, ALPH, solver=s)

for c in solution1:
    (idx, xorval, cmpval) = func_params[c]
    s.add(L2[idx-16] ^ xorval == cmpval)


ret = L2.solve(all=True, log=True)
assert len(ret) == 1 and ret[0] == b"x8AYd420jQmFhN15"

solution2 = ret[0]

solution = solution1 + solution2
print("Flag: KCTF{" + solution.decode() + "}")
